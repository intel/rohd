/// Copyright (C) 2021 Intel Corporation
/// SPDX-License-Identifier: BSD-3-Clause
///
/// wave_dumper.dart
/// Waveform dumper for a given module hierarchy, dumps to .vcd file
///
/// 2021 May 7
/// Author: Max Korbel <max.korbel@intel.com>
///

import 'dart:io';
import 'package:rohd/rohd.dart';
import 'package:rohd/src/utilities/sanitizer.dart';
import 'package:rohd/src/utilities/uniquifier.dart';

/// A waveform dumper for simulations.
///
/// Outputs to vcd format at [outputPath].  [module] must be built prior to attaching the [WaveDumper].
class WaveDumper {
  /// The [Module] being dumped.
  final Module module;

  /// The output filepath of the generated waveforms.
  final String outputPath;

  /// The file to write dumped output waveform to.
  final File _outputFile;

  /// A sink to write contents into [_outputFile].
  late final IOSink _outFileSink;

  /// A counter for tracking signal names in the VCD file.
  int _signalMarkerIdx = 0;

  /// Stores the mapping from [Logic] to signal marker in the VCD file.
  final Map<Logic, String> _signalToMarkerMap = {};

  /// A set of all [Logic]s that have changed in this timestamp so far.
  ///
  /// This spans across multiple inject or changed events if they are in the same
  /// timestamp of the [Simulator].
  final Set<Logic> _changedLogicsThisTimestamp = <Logic>{};

  /// The timestamp which is currently being collected for a dump.
  ///
  /// When the [Simulator] time progresses beyond this, it will dump all the
  /// signals that have changed up until that point at this saved time value.
  var _currentDumpingTimestamp = Simulator.time;

  WaveDumper(this.module, {this.outputPath = 'waves.vcd'})
      : _outputFile = File(outputPath) {
    if (!module.hasBuilt) {
      throw Exception(
          'Module must be built before passed to dumper.  Call build() first.');
    }

    _outFileSink = _outputFile.openWrite();

    _collectAllSignals();

    _writeHeader();
    _writeScope();

    Simulator.preTick.listen((args) {
      if (Simulator.time != _currentDumpingTimestamp) {
        if (_changedLogicsThisTimestamp.isNotEmpty) {
          // no need to write blank timestamps
          _captureTimestamp(_currentDumpingTimestamp);
        }
        _currentDumpingTimestamp = Simulator.time;
      }
    });

    Simulator.registerEndOfSimulationAction(() async {
      _captureTimestamp(Simulator.time);

      await _terminate();
    });
  }

  /// Writes [contents] to the output file.
  void _writeToFile(String contents) {
    _outFileSink.write(contents);
  }

  /// Terminates the waveform dumping, including closing the file.
  Future<void> _terminate() async {
    await _outFileSink.flush();
    await _outFileSink.close();
  }

  /// Registers all signal value changes to write updates to the dumped VCD.
  void _collectAllSignals() {
    var modulesToParse = <Module>[module];
    for (var i = 0; i < modulesToParse.length; i++) {
      var m = modulesToParse[i];
      for (var sig in m.signals) {
        if (sig is Const) {
          // constant values are "boring" to inspect
          continue;
        }

        _signalToMarkerMap[sig] = 's${_signalMarkerIdx++}';
        sig.changed.listen((args) {
          _changedLogicsThisTimestamp.add(sig);
        });
      }
      for (var subm in m.subModules) {
        if (subm is InlineSystemVerilog) {
          // the InlineSystemVerilog modules are "boring" to inspect
          continue;
        }
        modulesToParse.add(subm);
      }
    }
  }

  /// Writes the top header for the VCD file.
  void _writeHeader() {
    var dateString = DateTime.now().toIso8601String();
    var timescale = '1ps';
    var header = '''
\$date
  $dateString
\$end
\$version
  ROHD
\$end
\$comment
  Generated by ROHD - www.github.com/intel/rohd
\$end
\$timescale $timescale \$end
''';
    _writeToFile(header);
  }

  /// Writes the scope of the VCD, including signal and hierarchy declarations, as well as initial values.
  void _writeScope() {
    var scopeString = _computeScopeString(module);
    scopeString += '\$enddefinitions \$end\n';
    scopeString += '\$dumpvars\n';
    _writeToFile(scopeString);
    for (var element in _signalToMarkerMap.keys) {
      _writeSignalValueUpdate(element);
    }
    _writeToFile('\$end\n');
  }

  /// Generates the top of the scope string (signal and hierarchy definitions).
  String _computeScopeString(Module m, {int indent = 0}) {
    var moduleSignalUniquifier = Uniquifier();
    var padding = List.filled(indent, '  ').join();
    var scopeString = '$padding\$scope module ${m.uniqueInstanceName} \$end\n';
    var innerScopeString = '';
    for (var sig in m.signals) {
      if (!_signalToMarkerMap.containsKey(sig)) continue;

      var width = sig.width;
      var marker = _signalToMarkerMap[sig];
      var signalName = Sanitizer.sanitizeSV(sig.name);
      signalName = moduleSignalUniquifier.getUniqueName(
          initialName: signalName, reserved: sig.isPort);
      innerScopeString +=
          '  $padding\$var wire $width $marker $signalName \$end\n';
    }
    for (var subModule in m.subModules) {
      innerScopeString += _computeScopeString(subModule, indent: indent + 1);
    }
    if (innerScopeString.isEmpty) {
      // no need to dump empty scopes
      return '';
    }
    scopeString += innerScopeString;
    scopeString += '$padding\$upscope \$end\n';
    return scopeString;
  }

  /// Writes the current timestamp to the VCD.
  void _captureTimestamp(int timestamp) {
    var timestampString = '#$timestamp\n';
    _writeToFile(timestampString);

    for (var signal in _changedLogicsThisTimestamp) {
      _writeSignalValueUpdate(signal);
    }
    _changedLogicsThisTimestamp.clear();
  }

  /// Writes the current value of [signal] to the VCD.
  void _writeSignalValueUpdate(Logic signal) {
    var updateValue = signal.width > 1
        ? 'b' +
            signal.value.reversed
                .toList()
                .map((e) => e.toString(includeWidth: false))
                .join() +
            ' '
        : signal.value.toString(includeWidth: false);
    var marker = _signalToMarkerMap[signal];
    var updateString = '$updateValue$marker\n';
    _writeToFile(updateString);
  }
}

@Deprecated('Use WaveDumper instead')
typedef Dumper = WaveDumper;
